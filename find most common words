from urllib.request import urlopen
from bs4 import BeautifulSoup
from bs4.element import Comment
import urllib.request
from time import sleep
from random import randint
import collections
import re
import pandas as pd
import matplotlib.pyplot as plt

# this url has the links to all offspring lyrics on AZLyrics:
url = "https://www.azlyrics.com/o/offspring.html"
html = urlopen(url).read()
soup = BeautifulSoup(html, features="html.parser")

# get links:
links = []
for link in soup.findAll('a'):
    links.append(link.get('href'))

# get the links for the song lyrics:
lyrics_links_temp = links[33:182]

# change the format of the links in lyrics_links to make them clickable:
lyrics_links = []
for item in lyrics_links_temp:
    temp = ""
    temp = item[2:]
    temp = "https://www.azlyrics.com" + temp
    lyrics_links.append(temp)


# get the visible text from these links (exclude tags, etc.):
# return True only for visible text:
def tag_visible(element):
    if element.parent.name in ['style', 'script', 'head', 'title', 'meta', '[document]']:
        return False
    if isinstance(element, Comment):
        return False
    return True


# return visible text:
def text_from_html(body):
    soup = BeautifulSoup(body, 'html.parser')
    texts = soup.findAll(text=True)
    visible_texts = filter(tag_visible, texts)
    visible_texts_no_spaces = []
    for t in visible_texts:
        visible_texts_no_spaces.append(t.strip())  # strip removes spaces from beginning and end of string
    return u" ".join(visible_texts_no_spaces)  # u" ".join() creates unicode string with " " as separator


# get visible text from all the links:
lyrics_text_list = []
for link in lyrics_links:
    link_html = urllib.request.urlopen(link).read()
    lyrics_text_list.append(text_from_html(link_html))
    sleep(randint(5, 20))

# write the contents of lyrics_text_list to a file:
lyrics_file = open("all_lyrics", "w")
for element in lyrics_text_list:
    lyrics_file.write(element + "\n" + "\n" + "\n" + "\n" + "\n" + "\n" + "\n" + "\n" + "\n" + "\n")
lyrics_file.close()

# read the elements of all_lyrics into a list. Use "Writer(s): " as separator because this string appears exactly
# once in every song:
with open('all_lyrics') as f:
    file_list = [word for line in f for word in line.split(sep="Writer(s): ")]

# make a list in which each item is the lyrics of a specific song. use " # " to identify which entries of file_list
# are actual lyrics we want, since " # " appears exactly once in every song:
lyrics_text_list_new = []
for item in file_list:
    if " # " in item:
        lyrics_text_list_new.append(item)

# remove irrelevant contents of the list, so we only keep the song lyrics:
for i in range(len(lyrics_text_list_new)):
    lyrics_text_list_new[i] = re.sub(r'\s+Submit Corrections.+$', "", lyrics_text_list_new[i])
    lyrics_text_list_new[i] = re.sub(r'^\s{18}.+Search\s{42}', "", lyrics_text_list_new[i])
    lyrics_text_list_new[i] = re.sub(r'^\".+\"\slyrics\s{3}The Offspring Lyrics\s{6}\".+\"\s{4}', "",
                                     lyrics_text_list_new[i])
    if "(originally" in lyrics_text_list_new[i]:
        lyrics_text_list_new[i] = re.sub(
            r'^\".+\"\slyrics\s{3}The Offspring Lyrics\s{6}\".+\"\s{2}\(originally.+\)\s{4}'
            , "", lyrics_text_list_new[i])
    if "(from" in lyrics_text_list_new[i]:
        lyrics_text_list_new[i] = re.sub(r'^\".+\"\slyrics\s{3}The Offspring Lyrics\s{6}\".+\"\s{2}\(from.+\)\s{4}', "",
                                         lyrics_text_list_new[i])

# get a list of the words appearing in the lyrics, removing the punctuation marks:
words = []
punctuation = "!&(),.:;?[]"
for item in lyrics_text_list_new:
    temp = item.split(" ")
    for word in temp:
        for i in word:
            if i in punctuation:
                word = word.replace(i, "")
        words.append(word.lower())

# make a dictionary with words as keys and frequencies of these words as values:
counts = dict(collections.Counter(words))

# make a dataframe out of counts dictionary:
words_dataframe = pd.DataFrame(counts.items())
words_dataframe.columns = ['word', 'counts']
words_dataframe = words_dataframe.sort_values(by="counts", ascending=False)

# Pick the 10 most common words, excluding articles, pronouns, prepositions and conjunctions.
# I excluded words like 'in' and 'to' which can often be used as parts of phrasal verbs.
# I also included only the first occurrence of 'to be' verb and not its variations like "i'm", etc.:
top_15_words = []
top_15_counts = []
top_15_words.append(words_dataframe['word'][13])
top_15_counts.append(words_dataframe['counts'][13])
top_15_words.append(words_dataframe['word'][49])
top_15_counts.append(words_dataframe['counts'][49])
top_15_words.append(words_dataframe['word'][148])
top_15_counts.append(words_dataframe['counts'][148])
top_15_words.append(words_dataframe['word'][224])
top_15_counts.append(words_dataframe['counts'][224])
top_15_words.append(words_dataframe['word'][115])
top_15_counts.append(words_dataframe['counts'][115])
top_15_words.append(words_dataframe['word'][120])
top_15_counts.append(words_dataframe['counts'][120])
top_15_words.append(words_dataframe['word'][443])
top_15_counts.append(words_dataframe['counts'][443])
top_15_words.append(words_dataframe['word'][105])
top_15_counts.append(words_dataframe['counts'][105])
top_15_words.append(words_dataframe['word'][34])
top_15_counts.append(words_dataframe['counts'][34])
top_15_words.append(words_dataframe['word'][75])
top_15_counts.append(words_dataframe['counts'][75])
top_15_words.append(words_dataframe['word'][834])
top_15_counts.append(words_dataframe['counts'][834])
top_15_words.append(words_dataframe['word'][98])
top_15_counts.append(words_dataframe['counts'][98])
top_15_words.append(words_dataframe['word'][366])
top_15_counts.append(words_dataframe['counts'][366])
top_15_words.append(words_dataframe['word'][231])
top_15_counts.append(words_dataframe['counts'][231])
top_15_words.append(words_dataframe['word'][311])
top_15_counts.append(words_dataframe['counts'][311])

# plot:
fig = plt.figure()
ax = fig.add_subplot(111)
ax.barh(top_15_words, top_15_counts, color='steelblue')
ax.invert_yaxis()
ax.set_xlabel('Word Counts')
ax.set_title('The 15 most common words in Offspring lyrics')
for i, v in enumerate(top_15_counts):
    ax.text(v - 23, i + .25, str(v), color='white')
plt.show()
